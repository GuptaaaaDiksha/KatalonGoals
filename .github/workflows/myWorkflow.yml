# This workflow executes Katalon Studio tests and generates both standard Katalon reports and an Allure report.
# It triggers on a push to the main branch or can be run manually (workflow_dispatch).

name: Katalon Test Execution

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  katalon-test:
    runs-on: ubuntu-latest

    env:
      # Define environment variables for versions and paths to make them easy to manage.
      KATALON_VERSION: 9.2.0
      KATALON_PROJECT_PATH: DemoTest.prj
      KATALON_TEST_SUITE: "Test Suites/DemoSuite"
      BROWSER: "Chrome (headless)"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Using the latest version of the checkout action

      - name: Debug — show workspace & version vars
        run: |
          echo "GITHUB_WORKSPACE = $GITHUB_WORKSPACE"
          echo "KATALON_VERSION = $KATALON_VERSION"
          ls -la $GITHUB_WORKSPACE

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip curl jq xvfb libxi6 libnss3 libxml2-utils

      # This is a robust way to avoid Chrome/ChromeDriver version mismatches.
      - name: Get latest Chrome version
        id: chrome_version
        run: |
          LATEST_VERSION=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions.json | jq -r '.channels.Stable.version')
          echo "CHROME_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
          echo "Chrome version set to $LATEST_VERSION"

      - name: Install Chrome and ChromeDriver
        run: |
          # Download and set up Chrome
          curl -sL -o chrome.zip "https://storage.googleapis.com/chrome-for-testing-public/$CHROME_VERSION/linux64/chrome-linux64.zip"
          unzip -q chrome.zip
          sudo mv chrome-linux64 /opt/google/chrome
          sudo ln -sf /opt/google/chrome/chrome /usr/bin/google-chrome
          
          # Download and set up ChromeDriver
          curl -sL -o chromedriver.zip "https://storage.googleapis.com/chrome-for-testing-public/$CHROME_VERSION/linux64/chromedriver-linux64.zip"
          unzip -q chromedriver.zip
          chmod +x chromedriver-linux64/chromedriver
          sudo mv chromedriver-linux64/chromedriver /usr/local/bin/chromedriver

      - name: Download and extract Katalon Studio Engine
        run: |
          # Download the specified version of Katalon Studio Engine
          wget -q https://github.com/katalon-studio/katalon-studio/releases/download/v$KATALON_VERSION/Katalon_Studio_Engine_Linux_64-$KATALON_VERSION.tar.gz
          tar -xzf Katalon_Studio_Engine_Linux_64-$KATALON_VERSION.tar.gz
          
          # IMPORTANT: Copy the just-installed ChromeDriver to the Katalon directory to ensure version compatibility.
          cp /usr/local/bin/chromedriver $GITHUB_WORKSPACE/Katalon_Studio_Engine_Linux_64-$KATALON_VERSION/configuration/resources/drivers/chromedriver_linux64/chromedriver

      - name: Run Katalon Test Suite
        run: |
          # The Katalon test run will generate raw report files.
          # For Allure, it needs to be configured in the Katalon project to output JSON files to 'allure-results'.
          KATALON_DIR="$GITHUB_WORKSPACE/Katalon_Studio_Engine_Linux_64-$KATALON_VERSION"
          chmod +x "$KATALON_DIR/katalonc"
          
          xvfb-run --auto-servernum --server-args="-screen 0 1024x768x24" "$KATALON_DIR/katalonc" -noSplash \
            -runMode=console \
            -projectPath="$GITHUB_WORKSPACE/$KATALON_PROJECT_PATH" \
            -retry=0 \
            -testSuitePath="$KATALON_TEST_SUITE" \
            -executionProfile=default \
            -browserType="$BROWSER" \
            -apiKey="${{ secrets.KATALON_API_KEY }}" \
            --config -webui.autoUpdateDrivers=true

      # ⬇️ ===== ALLURE REPORT GENERATION ===== ⬇️
      - name: Generate Allure Report
        uses: simple-elf/allure-report-action@v1.7
        if: always() # This ensures the report is generated even if tests fail
        with:
          # This action looks for the raw JSON result files in this directory.
          # Your Katalon project must be configured to output results here.
          results_path: allure-results 
          report_path: allure-report # This is the directory where the HTML report will be generated.

      - name: Upload Allure Report Artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-report
          path: allure-report
          retention-days: 7

      # ⬆️ ======================================== ⬆️

      - name: Archive Katalon Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: katalon-reports
          path: |
            Reports/
            !Reports/**/*.html # Exclude HTML files if you only want raw data
            !Reports/**/*.csv

      - name: Show Test Pass/Fail Counts in Logs
        if: always()
        run: |
          REPORT_DIR="$GITHUB_WORKSPACE/Reports"
          # Find the main JUnit_Report.xml file
          XML_FILE=$(find "$REPORT_DIR" -name 'JUnit_Report.xml' | head -n 1)

          if [ -f "$XML_FILE" ]; then
            echo "JUnit XML report found at: $XML_FILE"

            # Parse the XML to get test counts
            TOTAL=$(xmllint --xpath "count(//testcase)" "$XML_FILE")
            PASSED=$(xmllint --xpath "count(//testcase[not(failure) and not(error) and not(skipped)])" "$XML_FILE")
            FAILED=$(xmllint --xpath "count(//testcase[failure or error])" "$XML_FILE")
            SKIPPED=$(xmllint --xpath "count(//testcase[skipped])" "$XML_FILE")

            # Print a summary to the GitHub Actions log
            echo "===== Test Summary ====="
            echo "Total: $TOTAL"
            echo "Passed: $PASSED"
            echo "Failed: $FAILED"
            echo "Skipped: $SKIPPED"
            echo "========================"

            if [ "$FAILED" -gt 0 ]; then
              echo "Some tests failed."
              exit 1
            fi
          else
            echo "No JUnit XML report found."
            exit 1
          fi
